# Gemini CLI OpenAI Worker - Local Development Environment Variables (Example)
#
# Copy this file to `.dev.vars` and fill in your values.
# Do NOT commit `.dev.vars` to version control. It contains secrets.

# Required: OAuth2 credentials JSON string from Gemini CLI authentication
# Obtain by running `npm i -g @google/gemini-cli && gemini` and then copying
# the contents of the credentials file (see README for exact path per OS).
GCP_SERVICE_ACCOUNT={"access_token":"ya29...","refresh_token":"1//...","scope":"...","token_type":"Bearer","id_token":"eyJ...","expiry_date":1750000000000}

# Optional: Google Cloud Project ID (auto-discovered if not set)
# GEMINI_PROJECT_ID=your-project-id

# Cloudflare KV namespace ID (LOCAL DEV ONLY; in CI, provide via repository secret)
# Used by scripts/prepare-wrangler-config.mjs to generate .wrangler.generated.toml
# GEMINI_CLI_KV_ID=your-kv-namespace-id

# Optional: API key for authentication (if not set, API is public)
# When set, clients must send: Authorization: Bearer <your-api-key>
# Recommended format: sk-<random>
# OPENAI_API_KEY=sk-your-secret-api-key-here

# --- Reasoning (Thinking) Output Configuration ---
#
# This section controls how the model's reasoning process is delivered.
# To enable reasoning, first set `ENABLE_REAL_THINKING=true`.

# ENABLE_REAL_THINKING=true           # Enables Gemini's native reasoning output.

# REASONING_OUTPUT_MODE=field         # Determines the format of the reasoning output.
#
# Available Modes:
#
#   - field: (RECOMMENDED FOR MOST CHAT CLIENTS)
#     Sends reasoning in a separate `delta.reasoning` field in the SSE stream.
#     The main `content` remains clean and free of special tags.
#     Use this for standard OpenAI-compatible clients.
#
#   - tagged: (FOR SPECIALIZED UI INTEGRATIONS LIKE DIFY)
#     Streams reasoning inline within the main `content`, wrapped in <think>...</think> blocks.
#     Only use this if your client is specifically designed to handle and render these tags (e.g., Dify).
#
#   - hidden: (FOR PRODUCTION OR WHEN REASONING IS NOT NEEDED)
#     Completely suppresses the reasoning output. You will only receive the final,
#     clean content. This is the most efficient option if you don't need to see
#     the model's thought process.
#
#   - r1: (FOR DEEPSEEK REASONER COMPATIBILITY)
#     A specialized mode for integrations expecting the DeepSeek Reasoner API format.
#     Streams reasoning via `delta.reasoning_content`.

#   - all: (ENABLE MULTIPLE ENDPOINT VARIANTS SIMULTANEOUSLY)
#     Exposes additional prefixed endpoints that pin a specific mode per prefix:
#       /field/v1    -> behaves like REASONING_OUTPUT_MODE=field
#       /tagged/v1   -> behaves like REASONING_OUTPUT_MODE=tagged
#       /hidden/v1   -> behaves like REASONING_OUTPUT_MODE=hidden
#       /r1/v1       -> behaves like REASONING_OUTPUT_MODE=r1 (DeepSeek-compatible)
#     The default /v1 remains available (uses environment-controlled mode).

# Tagged v1 (non-stream) inline control
# REASONING_TAGGED_NONSTREAM=omit     # omit | inline (default omit)

# Auto model switching (pro -> flash on 429/503)
# ENABLE_AUTO_MODEL_SWITCHING=true

# Content safety thresholds (BLOCK_NONE|BLOCK_FEW|BLOCK_SOME|BLOCK_ONLY_HIGH|HARM_BLOCK_THRESHOLD_UNSPECIFIED)
# GEMINI_MODERATION_HARASSMENT_THRESHOLD=BLOCK_SOME
# GEMINI_MODERATION_HATE_SPEECH_THRESHOLD=BLOCK_SOME
# GEMINI_MODERATION_SEXUALLY_EXPLICIT_THRESHOLD=BLOCK_SOME
# GEMINI_MODERATION_DANGEROUS_CONTENT_THRESHOLD=BLOCK_ONLY_HIGH

# Native tools (experimental)
# ENABLE_GEMINI_NATIVE_TOOLS=true
# ENABLE_GOOGLE_SEARCH=true
# ENABLE_URL_CONTEXT=true
# GEMINI_TOOLS_PRIORITY=native_first    # native_first|custom_first|user_choice
# DEFAULT_TO_NATIVE_TOOLS=true
# ALLOW_REQUEST_TOOL_CONTROL=true

# Citations and grounding
# ENABLE_INLINE_CITATIONS=false
# INCLUDE_GROUNDING_METADATA=true
# INCLUDE_SEARCH_ENTRY_POINT=false

# --- HTTP/CORS & Logging ---
# CORS_ALLOW_ORIGIN=http://localhost:3000   # Allowed origin for CORS responses (default: *)
# LOG_LEVEL=info                            # debug|info|warn|error (debug logs request bodies for POST/PUT/PATCH)
