# Gemini CLI OpenAI Worker - Local Development Environment Variables (Example)
#
# Copy this file to `.dev.vars` and fill in your values.
# Do NOT commit `.dev.vars` to version control. It contains secrets.

# Required: OAuth2 credentials JSON string from Gemini CLI authentication
# Obtain by running `npm i -g @google/gemini-cli && gemini` and then copying
# the contents of the credentials file (see README for exact path per OS).
GCP_SERVICE_ACCOUNT={"access_token":"ya29...","refresh_token":"1//...","scope":"...","token_type":"Bearer","id_token":"eyJ...","expiry_date":1750000000000}

# Optional: Google Cloud Project ID (auto-discovered if not set)
# GEMINI_PROJECT_ID=your-project-id

# Optional: API key for authentication (if not set, API is public)
# When set, clients must send: Authorization: Bearer <your-api-key>
# Recommended format: sk-<random>
# OPENAI_API_KEY=sk-your-secret-api-key-here

# Thinking modes (choose based on your needs)
# ENABLE_FAKE_THINKING=true           # Streams synthetic reasoning for demos/tests
# ENABLE_REAL_THINKING=true           # Enables Gemini native reasoning output
# STREAM_THINKING_AS_CONTENT=true     # Stream reasoning as <think> content (Dify Tagged)

# Auto model switching (pro -> flash on 429/503)
# ENABLE_AUTO_MODEL_SWITCHING=true

# Content safety thresholds (BLOCK_NONE|BLOCK_FEW|BLOCK_SOME|BLOCK_ONLY_HIGH|HARM_BLOCK_THRESHOLD_UNSPECIFIED)
# GEMINI_MODERATION_HARASSMENT_THRESHOLD=BLOCK_SOME
# GEMINI_MODERATION_HATE_SPEECH_THRESHOLD=BLOCK_SOME
# GEMINI_MODERATION_SEXUALLY_EXPLICIT_THRESHOLD=BLOCK_SOME
# GEMINI_MODERATION_DANGEROUS_CONTENT_THRESHOLD=BLOCK_ONLY_HIGH

# Native tools (experimental)
# ENABLE_GEMINI_NATIVE_TOOLS=true
# ENABLE_GOOGLE_SEARCH=true
# ENABLE_URL_CONTEXT=true
# GEMINI_TOOLS_PRIORITY=native_first    # native_first|custom_first|user_choice
# DEFAULT_TO_NATIVE_TOOLS=true
# ALLOW_REQUEST_TOOL_CONTROL=true

# Citations and grounding
# ENABLE_INLINE_CITATIONS=false
# INCLUDE_GROUNDING_METADATA=true
# INCLUDE_SEARCH_ENTRY_POINT=false
